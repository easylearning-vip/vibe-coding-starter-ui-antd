---
description: 组件开发规则适用于 React 组件和页面开发
globs: ["**/components/**/*.tsx", "**/pages/**/*.tsx", "**/src/**/*.tsx"]
alwaysApply: false
---

# 组件开发规则 - Vibe Coding Starter Antd UI

在开发 React 组件和页面时，请遵循以下组件开发标准和最佳实践。

## 组件设计原则

### 单一职责原则
每个组件应该只负责一个功能或展示一个特定的 UI 部分。

### 组合优于继承
使用组件组合而不是继承来构建复杂的 UI。

### Props 接口设计
```typescript
// 明确的 Props 接口定义
interface UserCardProps {
  user: User;
  size?: 'small' | 'default' | 'large';
  showActions?: boolean;
  onEdit?: (user: User) => void;
  onDelete?: (userId: number) => void;
  className?: string;
  style?: React.CSSProperties;
}

const UserCard: React.FC<UserCardProps> = ({
  user,
  size = 'default',
  showActions = true,
  onEdit,
  onDelete,
  className,
  style,
}) => {
  // 组件实现
};
```

## 组件开发模式

### 函数组件标准结构
```typescript
import React, { useState, useCallback, useMemo } from 'react';
import { Card, Button, Avatar, Space, Popconfirm } from 'antd';
import { EditOutlined, DeleteOutlined, UserOutlined } from '@ant-design/icons';
import classNames from 'classnames';
import type { User } from '@/types';
import styles from './index.less';

interface UserCardProps {
  user: User;
  size?: 'small' | 'default' | 'large';
  showActions?: boolean;
  onEdit?: (user: User) => void;
  onDelete?: (userId: number) => void;
  className?: string;
}

const UserCard: React.FC<UserCardProps> = ({
  user,
  size = 'default',
  showActions = true,
  onEdit,
  onDelete,
  className,
}) => {
  // 状态管理
  const [loading, setLoading] = useState(false);

  // 事件处理函数
  const handleEdit = useCallback(() => {
    onEdit?.(user);
  }, [onEdit, user]);

  const handleDelete = useCallback(async () => {
    setLoading(true);
    try {
      await onDelete?.(user.id);
    } finally {
      setLoading(false);
    }
  }, [onDelete, user.id]);

  // 计算属性
  const cardSize = useMemo(() => {
    return size === 'small' ? 'small' : 'default';
  }, [size]);

  const avatarSize = useMemo(() => {
    const sizeMap = { small: 32, default: 40, large: 48 };
    return sizeMap[size];
  }, [size]);

  // 渲染函数
  const renderActions = () => {
    if (!showActions) return null;

    return (
      <Space>
        <Button
          type="text"
          icon={<EditOutlined />}
          onClick={handleEdit}
          size="small"
        >
          编辑
        </Button>
        <Popconfirm
          title="确定要删除这个用户吗？"
          onConfirm={handleDelete}
          okText="确定"
          cancelText="取消"
        >
          <Button
            type="text"
            danger
            icon={<DeleteOutlined />}
            loading={loading}
            size="small"
          >
            删除
          </Button>
        </Popconfirm>
      </Space>
    );
  };

  return (
    <Card
      size={cardSize}
      className={classNames(styles.userCard, className)}
      actions={showActions ? [renderActions()] : undefined}
    >
      <Card.Meta
        avatar={
          <Avatar
            size={avatarSize}
            src={user.avatar}
            icon={<UserOutlined />}
          />
        }
        title={user.name}
        description={
          <div>
            <div>{user.email}</div>
            <div className={styles.role}>角色: {user.role}</div>
          </div>
        }
      />
    </Card>
  );
};

export default UserCard;
```

### 自定义 Hooks
```typescript
// hooks/useUserManagement.ts
import { useState, useCallback } from 'react';
import { message } from 'antd';
import { useRequest } from 'ahooks';
import { getUserList, createUser, updateUser, deleteUser } from '@/services/user';
import type { User, CreateUserRequest, UpdateUserRequest } from '@/types';

interface UseUserManagementOptions {
  onSuccess?: () => void;
  onError?: (error: Error) => void;
}

export const useUserManagement = (options: UseUserManagementOptions = {}) => {
  const [selectedUsers, setSelectedUsers] = useState<User[]>([]);

  // 获取用户列表
  const {
    data: userListData,
    loading: listLoading,
    refresh: refreshList,
  } = useRequest(
    (params) => getUserList(params),
    {
      defaultParams: [{ page: 1, pageSize: 10 }],
      onError: (error) => {
        message.error('获取用户列表失败');
        options.onError?.(error);
      },
    }
  );

  // 创建用户
  const { run: handleCreateUser, loading: createLoading } = useRequest(
    createUser,
    {
      manual: true,
      onSuccess: () => {
        message.success('用户创建成功');
        refreshList();
        options.onSuccess?.();
      },
      onError: (error) => {
        message.error('用户创建失败');
        options.onError?.(error);
      },
    }
  );

  // 更新用户
  const { run: handleUpdateUser, loading: updateLoading } = useRequest(
    ({ id, data }: { id: number; data: UpdateUserRequest }) => updateUser(id, data),
    {
      manual: true,
      onSuccess: () => {
        message.success('用户更新成功');
        refreshList();
        options.onSuccess?.();
      },
      onError: (error) => {
        message.error('用户更新失败');
        options.onError?.(error);
      },
    }
  );

  // 删除用户
  const { run: handleDeleteUser, loading: deleteLoading } = useRequest(
    deleteUser,
    {
      manual: true,
      onSuccess: () => {
        message.success('用户删除成功');
        refreshList();
        options.onSuccess?.();
      },
      onError: (error) => {
        message.error('用户删除失败');
        options.onError?.(error);
      },
    }
  );

  // 批量删除
  const handleBatchDelete = useCallback(async () => {
    if (selectedUsers.length === 0) {
      message.warning('请选择要删除的用户');
      return;
    }

    try {
      await Promise.all(selectedUsers.map(user => deleteUser(user.id)));
      message.success(`成功删除 ${selectedUsers.length} 个用户`);
      setSelectedUsers([]);
      refreshList();
      options.onSuccess?.();
    } catch (error) {
      message.error('批量删除失败');
      options.onError?.(error as Error);
    }
  }, [selectedUsers, refreshList, options]);

  // 选择用户
  const handleSelectUsers = useCallback((users: User[]) => {
    setSelectedUsers(users);
  }, []);

  return {
    // 数据
    users: userListData?.data || [],
    total: userListData?.total || 0,
    selectedUsers,

    // 加载状态
    listLoading,
    createLoading,
    updateLoading,
    deleteLoading,

    // 操作方法
    createUser: handleCreateUser,
    updateUser: handleUpdateUser,
    deleteUser: handleDeleteUser,
    batchDelete: handleBatchDelete,
    selectUsers: handleSelectUsers,
    refreshList,
  };
};
```

### 表单组件模式
```typescript
import React from 'react';
import { Form, Input, Select, Button, Space } from 'antd';
import { useIntl } from '@umijs/max';
import type { User, CreateUserRequest } from '@/types';

interface UserFormProps {
  initialValues?: Partial<User>;
  onSubmit: (values: CreateUserRequest) => Promise<void>;
  onCancel?: () => void;
  loading?: boolean;
}

const UserForm: React.FC<UserFormProps> = ({
  initialValues,
  onSubmit,
  onCancel,
  loading = false,
}) => {
  const intl = useIntl();
  const [form] = Form.useForm();

  const handleSubmit = async (values: CreateUserRequest) => {
    try {
      await onSubmit(values);
      form.resetFields();
    } catch (error) {
      // 错误处理由父组件负责
    }
  };

  return (
    <Form
      form={form}
      layout="vertical"
      initialValues={initialValues}
      onFinish={handleSubmit}
      autoComplete="off"
    >
      <Form.Item
        name="name"
        label={intl.formatMessage({ id: 'pages.user.form.name' })}
        rules={[
          { required: true, message: '请输入用户名' },
          { min: 2, max: 50, message: '用户名长度应在2-50个字符之间' },
        ]}
      >
        <Input placeholder="请输入用户名" />
      </Form.Item>

      <Form.Item
        name="email"
        label={intl.formatMessage({ id: 'pages.user.form.email' })}
        rules={[
          { required: true, message: '请输入邮箱' },
          { type: 'email', message: '请输入有效的邮箱地址' },
        ]}
      >
        <Input placeholder="请输入邮箱" />
      </Form.Item>

      <Form.Item
        name="role"
        label={intl.formatMessage({ id: 'pages.user.form.role' })}
        rules={[{ required: true, message: '请选择角色' }]}
      >
        <Select placeholder="请选择角色">
          <Select.Option value="user">普通用户</Select.Option>
          <Select.Option value="admin">管理员</Select.Option>
        </Select>
      </Form.Item>

      <Form.Item>
        <Space>
          <Button type="primary" htmlType="submit" loading={loading}>
            {initialValues ? '更新' : '创建'}
          </Button>
          {onCancel && (
            <Button onClick={onCancel}>
              取消
            </Button>
          )}
        </Space>
      </Form.Item>
    </Form>
  );
};

export default UserForm;
```

### 列表组件模式
```typescript
import React, { useState } from 'react';
import { Table, Button, Space, Input, Select, Card } from 'antd';
import { PlusOutlined, SearchOutlined } from '@ant-design/icons';
import type { ColumnsType, TableProps } from 'antd/es/table';
import type { User } from '@/types';
import UserCard from './UserCard';
import styles from './index.less';

interface UserListProps {
  users: User[];
  total: number;
  loading?: boolean;
  selectedRowKeys?: React.Key[];
  onSelectionChange?: (selectedRowKeys: React.Key[], selectedRows: User[]) => void;
  onEdit?: (user: User) => void;
  onDelete?: (userId: number) => void;
  onCreate?: () => void;
  onSearch?: (keyword: string) => void;
  onFilter?: (filters: Record<string, any>) => void;
  pagination?: TableProps<User>['pagination'];
}

const UserList: React.FC<UserListProps> = ({
  users,
  total,
  loading = false,
  selectedRowKeys,
  onSelectionChange,
  onEdit,
  onDelete,
  onCreate,
  onSearch,
  onFilter,
  pagination,
}) => {
  const [searchKeyword, setSearchKeyword] = useState('');
  const [roleFilter, setRoleFilter] = useState<string>();

  // 表格列定义
  const columns: ColumnsType<User> = [
    {
      title: '用户名',
      dataIndex: 'name',
      key: 'name',
      sorter: true,
      render: (name, record) => (
        <Space>
          <UserCard user={record} size="small" showActions={false} />
        </Space>
      ),
    },
    {
      title: '邮箱',
      dataIndex: 'email',
      key: 'email',
    },
    {
      title: '角色',
      dataIndex: 'role',
      key: 'role',
      filters: [
        { text: '普通用户', value: 'user' },
        { text: '管理员', value: 'admin' },
      ],
      render: (role) => (
        <span className={styles[`role-${role}`]}>
          {role === 'admin' ? '管理员' : '普通用户'}
        </span>
      ),
    },
    {
      title: '创建时间',
      dataIndex: 'createdAt',
      key: 'createdAt',
      sorter: true,
      render: (date) => new Date(date).toLocaleDateString(),
    },
    {
      title: '操作',
      key: 'actions',
      width: 150,
      render: (_, record) => (
        <Space>
          <Button
            type="link"
            size="small"
            onClick={() => onEdit?.(record)}
          >
            编辑
          </Button>
          <Button
            type="link"
            danger
            size="small"
            onClick={() => onDelete?.(record.id)}
          >
            删除
          </Button>
        </Space>
      ),
    },
  ];

  // 搜索处理
  const handleSearch = () => {
    onSearch?.(searchKeyword);
  };

  // 筛选处理
  const handleRoleFilter = (value: string) => {
    setRoleFilter(value);
    onFilter?.({ role: value });
  };

  // 行选择配置
  const rowSelection: TableProps<User>['rowSelection'] = onSelectionChange ? {
    selectedRowKeys,
    onChange: onSelectionChange,
    getCheckboxProps: (record) => ({
      disabled: record.role === 'admin', // 管理员不能被选择删除
    }),
  } : undefined;

  return (
    <Card>
      {/* 工具栏 */}
      <div className={styles.toolbar}>
        <Space>
          <Input.Search
            placeholder="搜索用户名或邮箱"
            value={searchKeyword}
            onChange={(e) => setSearchKeyword(e.target.value)}
            onSearch={handleSearch}
            style={{ width: 250 }}
            enterButton={<SearchOutlined />}
          />
          <Select
            placeholder="筛选角色"
            value={roleFilter}
            onChange={handleRoleFilter}
            allowClear
            style={{ width: 120 }}
          >
            <Select.Option value="user">普通用户</Select.Option>
            <Select.Option value="admin">管理员</Select.Option>
          </Select>
        </Space>
        
        <Space>
          {selectedRowKeys && selectedRowKeys.length > 0 && (
            <Button danger>
              批量删除 ({selectedRowKeys.length})
            </Button>
          )}
          <Button
            type="primary"
            icon={<PlusOutlined />}
            onClick={onCreate}
          >
            新建用户
          </Button>
        </Space>
      </div>

      {/* 用户表格 */}
      <Table
        columns={columns}
        dataSource={users}
        rowKey="id"
        loading={loading}
        rowSelection={rowSelection}
        pagination={{
          total,
          showSizeChanger: true,
          showQuickJumper: true,
          showTotal: (total, range) =>
            `第 ${range[0]}-${range[1]} 条/共 ${total} 条`,
          ...pagination,
        }}
        scroll={{ x: 800 }}
      />
    </Card>
  );
};

export default UserList;
```

## 页面组件开发

### 页面组件结构
```typescript
import React, { useState } from 'react';
import { PageContainer } from '@ant-design/pro-components';
import { Modal } from 'antd';
import { useIntl } from '@umijs/max';
import UserList from './components/UserList';
import UserForm from './components/UserForm';
import { useUserManagement } from './hooks/useUserManagement';
import type { User } from '@/types';

const UserManagementPage: React.FC = () => {
  const intl = useIntl();
  const [modalVisible, setModalVisible] = useState(false);
  const [editingUser, setEditingUser] = useState<User | null>(null);

  const {
    users,
    total,
    listLoading,
    createLoading,
    updateLoading,
    selectedUsers,
    createUser,
    updateUser,
    deleteUser,
    selectUsers,
    refreshList,
  } = useUserManagement({
    onSuccess: () => {
      setModalVisible(false);
      setEditingUser(null);
    },
  });

  // 事件处理
  const handleCreate = () => {
    setEditingUser(null);
    setModalVisible(true);
  };

  const handleEdit = (user: User) => {
    setEditingUser(user);
    setModalVisible(true);
  };

  const handleSubmit = async (values: any) => {
    if (editingUser) {
      await updateUser({ id: editingUser.id, data: values });
    } else {
      await createUser(values);
    }
  };

  const handleCancel = () => {
    setModalVisible(false);
    setEditingUser(null);
  };

  return (
    <PageContainer
      title={intl.formatMessage({ id: 'pages.user.title' })}
      content={intl.formatMessage({ id: 'pages.user.description' })}
    >
      <UserList
        users={users}
        total={total}
        loading={listLoading}
        selectedRowKeys={selectedUsers.map(u => u.id)}
        onSelectionChange={(keys, rows) => selectUsers(rows)}
        onEdit={handleEdit}
        onDelete={deleteUser}
        onCreate={handleCreate}
        onSearch={(keyword) => {
          // 实现搜索逻辑
        }}
      />

      <Modal
        title={editingUser ? '编辑用户' : '新建用户'}
        open={modalVisible}
        onCancel={handleCancel}
        footer={null}
        width={600}
      >
        <UserForm
          initialValues={editingUser || undefined}
          onSubmit={handleSubmit}
          onCancel={handleCancel}
          loading={createLoading || updateLoading}
        />
      </Modal>
    </PageContainer>
  );
};

export default UserManagementPage;
```

## 样式开发规范

### Less 样式组织
```less
// components/UserCard/index.less
@import '~antd/es/style/themes/default.less';

.userCard {
  margin-bottom: 16px;
  transition: all 0.3s ease;

  &:hover {
    box-shadow: @box-shadow-base;
    transform: translateY(-2px);
  }

  .role {
    color: @text-color-secondary;
    font-size: @font-size-sm;
    margin-top: 4px;

    &-admin {
      color: @error-color;
      font-weight: 500;
    }

    &-user {
      color: @success-color;
    }
  }
}

.toolbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 16px;
  padding: 16px;
  background: @component-background;
  border-radius: @border-radius-base;

  @media (max-width: @screen-md) {
    flex-direction: column;
    gap: 16px;
  }
}
```

## 性能优化

### React.memo 使用
```typescript
import React from 'react';
import { Card } from 'antd';
import type { User } from '@/types';

interface UserCardProps {
  user: User;
  onClick?: (user: User) => void;
}

const UserCard: React.FC<UserCardProps> = React.memo(({ user, onClick }) => {
  return (
    <Card onClick={() => onClick?.(user)}>
      <Card.Meta title={user.name} description={user.email} />
    </Card>
  );
}, (prevProps, nextProps) => {
  // 自定义比较函数
  return (
    prevProps.user.id === nextProps.user.id &&
    prevProps.user.name === nextProps.user.name &&
    prevProps.user.email === nextProps.user.email
  );
});

export default UserCard;
```

### 虚拟滚动
```typescript
import { List } from 'antd';
import { FixedSizeList as VirtualList } from 'react-window';

const VirtualUserList: React.FC<{ users: User[] }> = ({ users }) => {
  const Row = ({ index, style }: any) => (
    <div style={style}>
      <UserCard user={users[index]} />
    </div>
  );

  return (
    <VirtualList
      height={600}
      itemCount={users.length}
      itemSize={120}
      width="100%"
    >
      {Row}
    </VirtualList>
  );
};
```

记住：始终优先考虑用户体验、性能和可维护性。编写清洁、可复用的组件，遵循 React 和 Ant Design 的最佳实践。
