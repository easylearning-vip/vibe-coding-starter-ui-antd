---
description: 测试规则适用于 Vibe Coding Starter Antd UI 项目的测试文件
globs: ["**/*.test.ts", "**/*.test.tsx", "**/*.spec.ts", "**/*.spec.tsx", "**/tests/**/*.ts", "**/tests/**/*.tsx", "**/e2e/**/*.ts"]
alwaysApply: false
---

# 前端测试规则 - Vibe Coding Starter Antd UI

在为这个 React + Ant Design Pro 项目编写测试时，请遵循以下全面的测试指南。

## 测试策略

### 测试金字塔
- **单元测试 (70%)**: 测试单个组件和函数
- **集成测试 (20%)**: 测试组件间的交互
- **E2E 测试 (10%)**: 测试完整的用户流程

### 测试工具栈
- **单元测试**: Jest + React Testing Library
- **E2E 测试**: Playwright
- **Mock**: Jest Mock + MSW (Mock Service Worker)
- **覆盖率**: Jest Coverage

## 单元测试规范

### 组件测试模式
```typescript
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { ConfigProvider } from 'antd';
import zhCN from 'antd/locale/zh_CN';
import UserList from './index';

// 测试工具函数
const renderWithProvider = (component: React.ReactElement) => {
  return render(
    <ConfigProvider locale={zhCN}>
      {component}
    </ConfigProvider>
  );
};

describe('UserList 组件', () => {
  const mockUsers = [
    { id: 1, name: '张三', email: 'zhangsan@example.com', role: 'user' },
    { id: 2, name: '李四', email: 'lisi@example.com', role: 'admin' },
  ];

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('应该正确渲染用户列表', () => {
    renderWithProvider(<UserList users={mockUsers} />);
    
    expect(screen.getByText('张三')).toBeInTheDocument();
    expect(screen.getByText('李四')).toBeInTheDocument();
    expect(screen.getByText('zhangsan@example.com')).toBeInTheDocument();
  });

  it('应该在加载时显示 Spin 组件', () => {
    renderWithProvider(<UserList users={[]} loading={true} />);
    
    expect(screen.getByTestId('loading-spinner')).toBeInTheDocument();
  });

  it('应该在点击用户时调用 onUserSelect', async () => {
    const mockOnUserSelect = jest.fn();
    renderWithProvider(
      <UserList users={mockUsers} onUserSelect={mockOnUserSelect} />
    );
    
    fireEvent.click(screen.getByText('张三'));
    
    await waitFor(() => {
      expect(mockOnUserSelect).toHaveBeenCalledWith(mockUsers[0]);
    });
  });

  it('应该正确处理空数据状态', () => {
    renderWithProvider(<UserList users={[]} />);
    
    expect(screen.getByText('暂无数据')).toBeInTheDocument();
  });
});
```

### Hooks 测试
```typescript
import { renderHook, act } from '@testing-library/react';
import { useUserManagement } from './useUserManagement';

describe('useUserManagement Hook', () => {
  it('应该正确初始化状态', () => {
    const { result } = renderHook(() => useUserManagement());
    
    expect(result.current.users).toEqual([]);
    expect(result.current.loading).toBe(false);
    expect(result.current.error).toBeNull();
  });

  it('应该正确处理用户创建', async () => {
    const { result } = renderHook(() => useUserManagement());
    
    const newUser = { name: '王五', email: 'wangwu@example.com' };
    
    await act(async () => {
      await result.current.createUser(newUser);
    });
    
    expect(result.current.users).toHaveLength(1);
    expect(result.current.users[0]).toMatchObject(newUser);
  });
});
```

### API 服务测试
```typescript
import { getUserList, createUser } from '@/services/user';
import { request } from '@umijs/max';

// Mock request 函数
jest.mock('@umijs/max', () => ({
  request: jest.fn(),
}));

const mockRequest = request as jest.MockedFunction<typeof request>;

describe('用户 API 服务', () => {
  beforeEach(() => {
    mockRequest.mockClear();
  });

  describe('getUserList', () => {
    it('应该正确调用用户列表 API', async () => {
      const mockResponse = {
        data: [
          { id: 1, name: '张三', email: 'zhangsan@example.com' }
        ],
        total: 1,
      };
      
      mockRequest.mockResolvedValue(mockResponse);
      
      const params = { page: 1, pageSize: 10 };
      const result = await getUserList(params);
      
      expect(mockRequest).toHaveBeenCalledWith('/api/users', {
        method: 'GET',
        params,
      });
      expect(result).toEqual(mockResponse);
    });

    it('应该正确处理 API 错误', async () => {
      const mockError = new Error('网络错误');
      mockRequest.mockRejectedValue(mockError);
      
      await expect(getUserList({ page: 1, pageSize: 10 }))
        .rejects.toThrow('网络错误');
    });
  });

  describe('createUser', () => {
    it('应该正确创建用户', async () => {
      const newUser = { name: '李四', email: 'lisi@example.com' };
      const mockResponse = { id: 2, ...newUser };
      
      mockRequest.mockResolvedValue(mockResponse);
      
      const result = await createUser(newUser);
      
      expect(mockRequest).toHaveBeenCalledWith('/api/users', {
        method: 'POST',
        data: newUser,
      });
      expect(result).toEqual(mockResponse);
    });
  });
});
```

### 表单测试
```typescript
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import UserForm from './UserForm';

describe('UserForm 组件', () => {
  const mockOnSubmit = jest.fn();
  
  beforeEach(() => {
    mockOnSubmit.mockClear();
  });

  it('应该正确提交表单数据', async () => {
    const user = userEvent.setup();
    render(<UserForm onSubmit={mockOnSubmit} />);
    
    // 填写表单
    await user.type(screen.getByLabelText('用户名'), '张三');
    await user.type(screen.getByLabelText('邮箱'), 'zhangsan@example.com');
    await user.selectOptions(screen.getByLabelText('角色'), 'admin');
    
    // 提交表单
    fireEvent.click(screen.getByRole('button', { name: '提交' }));
    
    await waitFor(() => {
      expect(mockOnSubmit).toHaveBeenCalledWith({
        name: '张三',
        email: 'zhangsan@example.com',
        role: 'admin',
      });
    });
  });

  it('应该显示表单验证错误', async () => {
    const user = userEvent.setup();
    render(<UserForm onSubmit={mockOnSubmit} />);
    
    // 提交空表单
    fireEvent.click(screen.getByRole('button', { name: '提交' }));
    
    await waitFor(() => {
      expect(screen.getByText('请输入用户名')).toBeInTheDocument();
      expect(screen.getByText('请输入邮箱')).toBeInTheDocument();
    });
    
    expect(mockOnSubmit).not.toHaveBeenCalled();
  });
});
```

## E2E 测试规范

### Playwright 测试配置
```typescript
// playwright.config.ts
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  testDir: './e2e',
  fullyParallel: true,
  forbidOnly: !!process.env.CI,
  retries: process.env.CI ? 2 : 0,
  workers: process.env.CI ? 1 : undefined,
  reporter: 'html',
  use: {
    baseURL: 'http://localhost:8000',
    trace: 'on-first-retry',
  },
  projects: [
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
    },
    {
      name: 'firefox',
      use: { ...devices['Desktop Firefox'] },
    },
  ],
  webServer: {
    command: 'npm run start',
    url: 'http://localhost:8000',
    reuseExistingServer: !process.env.CI,
  },
});
```

### E2E 测试示例
```typescript
import { test, expect } from '@playwright/test';

test.describe('用户管理页面', () => {
  test.beforeEach(async ({ page }) => {
    // 登录
    await page.goto('/user/login');
    await page.fill('[data-testid="username"]', 'admin');
    await page.fill('[data-testid="password"]', 'password');
    await page.click('[data-testid="login-button"]');
    
    // 等待跳转到首页
    await expect(page).toHaveURL('/welcome');
  });

  test('应该能够查看用户列表', async ({ page }) => {
    await page.goto('/admin/user-list');
    
    // 等待用户列表加载
    await expect(page.locator('[data-testid="user-table"]')).toBeVisible();
    
    // 验证表格头部
    await expect(page.locator('th:has-text("用户名")')).toBeVisible();
    await expect(page.locator('th:has-text("邮箱")')).toBeVisible();
    await expect(page.locator('th:has-text("角色")')).toBeVisible();
  });

  test('应该能够创建新用户', async ({ page }) => {
    await page.goto('/admin/user-list');
    
    // 点击新建用户按钮
    await page.click('[data-testid="create-user-button"]');
    
    // 填写用户信息
    await page.fill('[data-testid="user-name"]', '测试用户');
    await page.fill('[data-testid="user-email"]', 'test@example.com');
    await page.selectOption('[data-testid="user-role"]', 'user');
    
    // 提交表单
    await page.click('[data-testid="submit-button"]');
    
    // 验证成功消息
    await expect(page.locator('.ant-message-success')).toBeVisible();
    
    // 验证用户出现在列表中
    await expect(page.locator('text=测试用户')).toBeVisible();
  });

  test('应该能够编辑用户信息', async ({ page }) => {
    await page.goto('/admin/user-list');
    
    // 点击编辑按钮
    await page.click('[data-testid="edit-user-1"]');
    
    // 修改用户名
    await page.fill('[data-testid="user-name"]', '修改后的用户名');
    
    // 提交修改
    await page.click('[data-testid="submit-button"]');
    
    // 验证修改成功
    await expect(page.locator('text=修改后的用户名')).toBeVisible();
  });
});
```

### 页面对象模式
```typescript
// e2e/pages/UserListPage.ts
import { Page, Locator } from '@playwright/test';

export class UserListPage {
  readonly page: Page;
  readonly createButton: Locator;
  readonly userTable: Locator;
  readonly searchInput: Locator;

  constructor(page: Page) {
    this.page = page;
    this.createButton = page.locator('[data-testid="create-user-button"]');
    this.userTable = page.locator('[data-testid="user-table"]');
    this.searchInput = page.locator('[data-testid="search-input"]');
  }

  async goto() {
    await this.page.goto('/admin/user-list');
  }

  async createUser(userData: { name: string; email: string; role: string }) {
    await this.createButton.click();
    await this.page.fill('[data-testid="user-name"]', userData.name);
    await this.page.fill('[data-testid="user-email"]', userData.email);
    await this.page.selectOption('[data-testid="user-role"]', userData.role);
    await this.page.click('[data-testid="submit-button"]');
  }

  async searchUser(keyword: string) {
    await this.searchInput.fill(keyword);
    await this.page.keyboard.press('Enter');
  }
}
```

## Mock 数据管理

### MSW 配置
```typescript
// src/mocks/handlers.ts
import { rest } from 'msw';

export const handlers = [
  rest.get('/api/users', (req, res, ctx) => {
    return res(
      ctx.json({
        data: [
          { id: 1, name: '张三', email: 'zhangsan@example.com', role: 'user' },
          { id: 2, name: '李四', email: 'lisi@example.com', role: 'admin' },
        ],
        total: 2,
      })
    );
  }),

  rest.post('/api/users', (req, res, ctx) => {
    return res(
      ctx.json({
        id: 3,
        ...req.body,
        createdAt: new Date().toISOString(),
      })
    );
  }),
];
```

## 测试工具函数

### 自定义渲染函数
```typescript
// tests/test-utils.tsx
import React from 'react';
import { render, RenderOptions } from '@testing-library/react';
import { ConfigProvider } from 'antd';
import zhCN from 'antd/locale/zh_CN';
import { BrowserRouter } from 'react-router-dom';

const AllTheProviders: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  return (
    <BrowserRouter>
      <ConfigProvider locale={zhCN}>
        {children}
      </ConfigProvider>
    </BrowserRouter>
  );
};

const customRender = (
  ui: React.ReactElement,
  options?: Omit<RenderOptions, 'wrapper'>
) => render(ui, { wrapper: AllTheProviders, ...options });

export * from '@testing-library/react';
export { customRender as render };
```

### 测试数据工厂
```typescript
// tests/factories/userFactory.ts
export const createMockUser = (overrides = {}) => ({
  id: Math.floor(Math.random() * 1000),
  name: '测试用户',
  email: 'test@example.com',
  role: 'user',
  createdAt: new Date().toISOString(),
  ...overrides,
});

export const createMockUserList = (count = 5) => {
  return Array.from({ length: count }, (_, index) =>
    createMockUser({ id: index + 1, name: `用户${index + 1}` })
  );
};
```

## 测试最佳实践

### 测试命名规范
- 描述性的测试名称，说明测试的行为和期望结果
- 使用中文描述，便于团队理解
- 遵循 "应该 + 行为 + 条件" 的格式

### 测试组织
- 使用 describe 块组织相关测试
- 使用 beforeEach/afterEach 进行测试设置和清理
- 保持测试的独立性和幂等性

### 断言策略
- 使用语义化的断言方法
- 优先测试用户可见的行为
- 避免测试实现细节

### 性能考虑
- 合理使用 Mock 减少测试时间
- 避免不必要的 DOM 查询
- 使用 waitFor 处理异步操作

记住：测试是代码质量的保障，编写清晰、可维护的测试，确保应用的稳定性和可靠性。
